# bot.py ‚Äî Telethon + OpenAI —Ä–µ–ø–æ—Å—Ç–µ—Ä –¥–ª—è –∏–Ω—Å–∞–π–¥–æ–≤ (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
import os
import re
import asyncio
import random
from datetime import datetime, timedelta
from pathlib import Path
from dotenv import load_dotenv
import pytz
from telethon import TelegramClient, events, types
from telethon.sessions import StringSession
import openai
from rapidfuzz import fuzz

# ---------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è / loop fix (Windows)
# ---------------------------
try:
    asyncio.get_running_loop()
except RuntimeError:
    asyncio.set_event_loop(asyncio.new_event_loop())

load_dotenv()

# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env
# ---------------------------
# Telethon session: prefer user session string (to read any channels).
TELETHON_SESSION_STRING = os.getenv("TELETHON_SESSION_STRING")  # StringSession, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é
BOT_TOKEN = os.getenv("BOT_TOKEN")  # fallback (–±–æ—Ç)
API_ID = int(os.getenv("API_ID") or 0)
API_HASH = os.getenv("API_HASH") or ""
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SOURCE_IDS = [int(x) for x in os.getenv("SOURCE_IDS", "").split(",") if x.strip()]
TARGET_CHANNEL = os.getenv("TARGET_CHANNEL_ID")
try:
    TARGET_CHANNEL = int(TARGET_CHANNEL)
except Exception:
    pass
OWNER_ID = int(os.getenv("OWNER_ID") or 0)
USERNAME_TAG = os.getenv("USERNAME_TAG", "@insideryyy")

TIMEZONE = pytz.timezone(os.getenv("TIMEZONE", "Europe/Moscow"))
POST_INTERVAL_MINUTES = int(os.getenv("POST_INTERVAL_MINUTES", 40))
START_HOUR = int(os.getenv("START_HOUR", 8))
END_HOUR = int(os.getenv("END_HOUR", 23))

SIMILARITY_THRESHOLD = int(os.getenv("SIMILARITY_THRESHOLD", 85))
SKIP_FORWARDS = os.getenv("SKIP_FORWARDS", "True").lower() in ("1", "true", "yes")

# Files
PUBLISHED_FILE = Path("published.txt")
QUEUE_FILE = Path("queue.txt")
LOG_FILE = Path("log.txt")

# ---------------------------
# –ü—Ä–æ–≤–µ—Ä–∫–∏
# ---------------------------
def log_console(msg: str):
    now = datetime.now(TIMEZONE).strftime("%Y-%m-%d %H:%M:%S")
    line = f"[{now}] {msg}"
    print(line)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(line + "\n")

log_console("–ü—Ä–æ–≤–µ—Ä–∫–∞ .env:")
log_console(f"API_ID: {API_ID if API_ID else 'None'}")
log_console(f"API_HASH: {'set' if API_HASH else 'None'}")
log_console(f"BOT_TOKEN: {'set' if BOT_TOKEN else 'None'}")
log_console(f"OPENAI_API_KEY: {'set' if OPENAI_API_KEY else 'None'}")
log_console(f"SOURCE_IDS: {SOURCE_IDS}")
log_console(f"TARGET_CHANNEL: {TARGET_CHANNEL}")
log_console(f"OWNER_ID: {OWNER_ID}")
log_console(f"USERNAME_TAG: {USERNAME_TAG}")
log_console("-" * 40)

if not OPENAI_API_KEY:
    log_console("Warning: OPENAI_API_KEY not set. AI features will fail.")
openai.api_key = OPENAI_API_KEY

# ---------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon client
# ---------------------------
if TELETHON_SESSION_STRING:
    client = TelegramClient(StringSession(TELETHON_SESSION_STRING), API_ID, API_HASH)
    log_console("–ò—Å–ø–æ–ª—å–∑—É–µ–º TELETHON_SESSION_STRING (user session).")
elif BOT_TOKEN:
    # bot session (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ: —á–∏—Ç–∞—Ç—å —á—É–∂–∏–µ –∫–∞–Ω–∞–ª—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω)
    client = TelegramClient("bot_session", API_ID, API_HASH)
    log_console("TELETHON_SESSION_STRING –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è BOT_TOKEN (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å).")
else:
    raise SystemExit("–ù—É–∂–µ–Ω TELETHON_SESSION_STRING –∏–ª–∏ BOT_TOKEN –∏ API_ID/API_HASH.")

# ---------------------------
# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ persistent storage
# ---------------------------
if not PUBLISHED_FILE.exists():
    PUBLISHED_FILE.write_text("", encoding="utf-8")
if not QUEUE_FILE.exists():
    QUEUE_FILE.write_text("", encoding="utf-8")
if not LOG_FILE.exists():
    LOG_FILE.write_text("", encoding="utf-8")

published = set(line.rstrip("\n") for line in PUBLISHED_FILE.read_text(encoding="utf-8").splitlines() if line.strip())
queued = [b.strip() for b in QUEUE_FILE.read_text(encoding="utf-8").split("\n\n---\n\n") if b.strip()]

stats = {"posted": 0, "filtered": 0}
last_post_info = {"message_id": None, "channel_username": None}
last_post_time = datetime.now(TIMEZONE) - timedelta(minutes=POST_INTERVAL_MINUTES)

# ---------------------------
# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —É—Ç–∏–ª–∏—Ç—ã –∏ —Ñ–∏–ª—å—Ç—Ä—ã
# ---------------------------
link_regex = re.compile(r"(https?:\/\/\S+|www\.\S+|t\.me\/\S+)", flags=re.IGNORECASE)
mention_regex = re.compile(r"@\w+", flags=re.IGNORECASE)
hashtag_regex = re.compile(r"#\w+", flags=re.IGNORECASE)

# —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π blacklist —Ä–µ–∫–ª–∞–º–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏
ad_keywords = [
    r"\b–ø–æ–¥–ø–∏—Å\w*\b", r"\b—Ä–µ–∫–ª–∞–º\w*\b", r"\b–ø–∏–∞—Ä\w*\b", r"\b—Å–∫–∏–¥–∫\w*\b",
    r"\b–∫—É–ø\w*\b", r"\b–∞–∫—Ü\w*\b", r"\b—Å–ø–æ–Ω—Å\w*\b", r"\b–¥–æ–Ω–∞—Ç\w*\b",
    r"\b—Å—Å—ã–ª–∫–∞\b", r"\b—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ\b", r"\b–ø–∞—Ä—Ç–Ω\w*\b"
]

def clean_text(text: str) -> str:
    if not text:
        return ""
    t = re.sub(link_regex, "", text)
    t = re.sub(mention_regex, "", t)
    t = re.sub(hashtag_regex, "", t)
    for kw in ad_keywords:
        t = re.sub(kw, "", t, flags=re.IGNORECASE)
    t = re.sub(r"\s+", " ", t).strip()
    return t

# –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
KEYWORDS = [
    "–±–ª–æ–≥–µ—Ä", "—Ç–∏–∫—Ç–æ–∫", "—Ç–∏–∫—Ç–æ–∫–µ—Ä", "—Å—Ç—Ä–∏–º–µ—Ä", "—é—Ç—É–±–µ—Ä", "—à–æ", "—à–æ—É",
    "—Ö–∞–π–ø", "—Å–∫–∞–Ω–¥–∞–ª", "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "—Ä–∞–∑–≤–æ–¥", "–æ—Ç–Ω–æ—à–µ–Ω–∏—è", "—Å–ª—É—Ö", "—Å–ª–∏–≤",
    "—É—Ç–µ—á–∫", "–∏–Ω—Å–∞–π–¥", "–∏–Ω—Ñ–∞", "—Ä–µ–∞–∫—Ü", "—Ñ–∞–Ω–∞—Ç", "–ø–æ–¥–ø–∏—Å—á–∏–∫", "–¥—Ä–∞–º–∞",
    "—Ä–æ–º–∞–Ω", "—Ä–∞—Å—Å—Ç–∞–≤–∞–Ω", "—Ä–∞–∑–æ–±–ª–∞—á", "–∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä", "–∫–æ–ª–ª–∞–±", "—Ç—Ä–µ–Ω–¥",
    "—Ö–∞–π–ø—Ö–∞—É—Å", "—Ñ–µ–π–∫", "—Ñ–æ–ª–ª–æ–≤–µ—Ä", "–ø–æ–¥–∫–∞—Å—Ç", "–≤–∏–¥–µ–æ", "—Å–∫—Ä–∏–Ω"
]

def is_relevant(text: str) -> bool:
    low = text.lower()
    found = any(k in low for k in KEYWORDS)
    ok_len = len(low) >= 30
    return found and ok_len

def is_local_duplicate(text: str) -> bool:
    # –±—ã—Å—Ç—Ä–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ exact or fuzzy
    if text in published:
        return True
    for old in published:
        try:
            score = fuzz.partial_ratio(text, old)
            if score >= SIMILARITY_THRESHOLD:
                return True
        except Exception:
            continue
    return False

# ---------------------------
# OpenAI helpers (async wrapper)
# ---------------------------
async def ai_is_relevant(text: str) -> bool:
    prompt = (
        "–¢—ã ‚Äî –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –∏–Ω—Å–∞–π–¥—ã/—Å–ª–∏–≤—ã/—Ö–∞–π–ø –≤–æ–∫—Ä—É–≥ –±–ª–æ–≥–µ—Ä–æ–≤. "
        "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º '–î–∞' –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–µ–Ω (–∏–Ω—Å–∞–π–¥/—Å–ª–∏–≤/–≤–∞–∂–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –ø—Ä–æ –±–ª–æ–≥–µ—Ä–∞), "
        "–∏–Ω–∞—á–µ –æ—Ç–≤–µ—Ç—å '–ù–µ—Ç'.\n\n"
        f"–¢–µ–∫—Å—Ç: {text}\n\n–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'."
    )
    try:
        resp = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-3.5-turbo",
            messages=[{"role":"user","content":prompt}],
            temperature=0
        )
        ans = resp.choices[0].message["content"].strip().lower()
        return ans.startswith("–¥") or ans.startswith("y")
    except Exception as e:
        log_console(f"OpenAI relevance error: {e}")
        return False

async def ai_paraphrase(text: str) -> str:
    cleaned = clean_text(text)
    prompt = (
        "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ –ø—Ä–æ –±–ª–æ–≥–µ—Ä–æ–≤ –∏ —Ç–∏–∫—Ç–æ–∫–µ—Ä–æ–≤. "
        "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–æ–º, –º–æ–ª–æ–¥—ë–∂–Ω–æ–º —Å—Ç–∏–ª–µ (18+), –¥–æ–±–∞–≤—å –ª—ë–≥–∫–∏–π —Å–∞—Ä–∫–∞–∑–º, —ç–º–æ–¥–∑–∏ (üëÄ, üò≠, üíÖ –∏ —Ç.–¥.), "
        "–∫–æ—Ä–æ—Ç–∫–∏–µ —à—É—Ç–∫–∏ –∏ –º–µ–º–Ω—ã–π —Å–ª–µ–Ω–≥ —Ç–∞–º, –≥–¥–µ —É–º–µ—Å—Ç–Ω–æ. "
        "–£–±–µ—Ä–∏ –ª—é–±—ã–µ —Å—Å—ã–ª–∫–∏/—É–ø–æ–º–∏–Ω–∞–Ω–∏—è/—Ö—ç—à—Ç–µ–≥–∏ –∏ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π –∏—Ö. "
        "–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–¥–∞—á–∞. "
        f"–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å {USERNAME_TAG}.\n\n–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{cleaned}"
    )
    try:
        resp = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-3.5-turbo",
            messages=[{"role":"user","content":prompt}],
            temperature=0.8,
            max_tokens=700
        )
        out = resp.choices[0].message["content"].strip()
        out = re.sub(link_regex, "", out)  # –ª–∏—à–Ω–∏–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å
        out = re.sub(r"\s+", " ", out).strip()
        return out
    except Exception as e:
        log_console(f"OpenAI paraphrase error: {e}")
        return cleaned + f"\n\n{USERNAME_TAG}"

# ---------------------------
# Queue / publish helpers
# ---------------------------
def save_published():
    with PUBLISHED_FILE.open("w", encoding="utf-8") as f:
        for item in published:
            f.write(item + "\n")

def save_queue():
    with QUEUE_FILE.open("w", encoding="utf-8") as f:
        f.write("\n\n---\n\n".join(queued))

async def add_to_queue(block: str):
    queued.append(block)
    save_queue()
    log_console(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å (–≤ –æ—á–µ—Ä–µ–¥–∏: {len(queued)})")

async def post_one_from_queue():
    global last_post_time, last_post_info, stats
    if not queued:
        log_console("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return
    block = queued.pop(0)
    save_queue()
    now = datetime.now(TIMEZONE)
    if now.hour < START_HOUR or now.hour >= END_HOUR:
        queued.insert(0, block)
        save_queue()
        log_console("–ó–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –æ–∫–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ‚Äî –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º.")
        return
    try:
        sent = await client.send_message(TARGET_CHANNEL, block)
        stats["posted"] += 1
        log_console("–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –ø–æ—Å—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        try:
            ent = await client.get_entity(TARGET_CHANNEL)
            username = getattr(ent, "username", None)
        except Exception:
            username = None
        last_post_info["message_id"] = getattr(sent, "id", None)
        last_post_info["channel_username"] = username
        last_post_time = now
    except Exception as e:
        log_console(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        queued.insert(0, block)
        save_queue()

# ---------------------------
# Handlers
# ---------------------------
@client.on(events.NewMessage(chats=SOURCE_IDS))
async def on_new_message(event):
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º forwarded
        if SKIP_FORWARDS and event.message.fwd_from:
            log_console("–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        raw = event.raw_text or ""
        if event.message and getattr(event.message, "message", None):
            raw = event.message.message

        if not raw or not raw.strip():
            return

        cleaned = clean_text(raw)
        if not cleaned:
            log_console("–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        # –ª–æ–∫–∞–ª—å–Ω—ã–π –¥—É–±–ª–∏–∫–∞—Ç
        if cleaned in published or is_local_duplicate(cleaned):
            log_console("–ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç (–ª–æ–∫–∞–ª—å–Ω–æ) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        # AI —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å (–æ—Ç–¥–µ–ª—å–Ω—ã–π check)
        is_rel = await ai_is_relevant(cleaned)
        if not is_rel:
            stats["filtered"] += 1
            log_console("AI –ø–æ–º–µ—Ç–∏–ª –∫–∞–∫ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return

        # AI –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç + –¥–µ–ª–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫
        rewritten = await ai_paraphrase(cleaned)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        await add_to_queue(rewritten)

        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–¥—É–ø–∞
        published.add(cleaned)
        save_published()

        log_console("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –∏ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.")
    except Exception as e:
        log_console(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")

# ---------------------------
# Owner commands (–ª–∏—á–∫–∞) —á–µ—Ä–µ–∑ Telethon
# ---------------------------
@client.on(events.NewMessage(from_users=OWNER_ID, pattern=r"^/status"))
async def owner_status(event):
    try:
        uptime = datetime.now(TIMEZONE) - (last_post_time or datetime.now(TIMEZONE))
        text = (
            f"‚úÖ –ë–æ—Ç –æ–Ω–ª–∞–π–Ω\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_time.strftime('%Y-%m-%d %H:%M:%S') if last_post_time else '–Ω–µ—Ç'}\n"
            f"–í –æ—á–µ—Ä–µ–¥–∏: {len(queued)}\n"
            f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['posted']}\n"
        )
        await event.reply(text)
    except Exception as e:
        log_console(f"owner_status error: {e}")

paused = False

@client.on(events.NewMessage(from_users=OWNER_ID, pattern=r"^/pause"))
async def owner_pause(event):
    global paused
    paused = True
    await event.reply("‚è∏ –ë–æ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É (–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã).")

@client.on(events.NewMessage(from_users=OWNER_ID, pattern=r"^/resume"))
async def owner_resume(event):
    global paused
    paused = False
    await event.reply("‚ñ∂Ô∏è –ë–æ—Ç –≤–æ–∑–æ–±–Ω–æ–≤–∏–ª –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")

@client.on(events.NewMessage(from_users=OWNER_ID, pattern=r"^/stats"))
async def owner_stats(event):
    try:
        text = f"Stats: posted={stats['posted']}, filtered={stats['filtered']}, queue={len(queued)}"
        await event.reply(text)
    except Exception as e:
        log_console(f"owner_stats error: {e}")

@client.on(events.NewMessage(from_users=OWNER_ID, pattern=r"^/forcepost"))
async def owner_forcepost(event):
    # —Ñ–æ—Ä—Å–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–¥–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if queued:
        block = queued.pop(0)
        save_queue()
        try:
            sent = await client.send_message(TARGET_CHANNEL, block)
            await event.reply("‚úÖ –§–æ—Ä—Å-–ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            stats["posted"] += 1
            # –Ω–µ –∑–∞–±—ã–≤–∞–µ–º last_post_time
        except Exception as e:
            await event.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
    else:
        await event.reply("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")

# ---------------------------
# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (–ø–æ—Å—Ç –∫–∞–∂–¥—ã–µ POST_INTERVAL_MINUTES)
# ---------------------------
async def schedule_poster():
    await asyncio.sleep(random.randint(1, 8))
    while True:
        try:
            if not paused:
                await post_one_from_queue()
            else:
                log_console("–ü–∞—É–∑–∞ –≤–∫–ª—é—á–µ–Ω–∞ ‚Äî –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã.")
            await asyncio.sleep(POST_INTERVAL_MINUTES * 60 + random.randint(-60, 120))
        except Exception as e:
            log_console(f"–û—à–∏–±–∫–∞ –≤ schedule_poster: {e}")
            await asyncio.sleep(30)

# ---------------------------
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
# ---------------------------
async def notify_owner_on_start():
    try:
        if OWNER_ID:
            await client.send_message(OWNER_ID, "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏.")
            log_console("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        log_console(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")

# ---------------------------
# –ì–ª–∞–≤–Ω–∞—è: —Å—Ç–∞—Ä—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ç–∞—Å–∫–∏
# ---------------------------
async def main():
    log_console("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    # —Å—Ç–∞—Ä—Ç Telethon
    if TELETHON_SESSION_STRING:
        # —Å user session: start() –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        await client.start()
    else:
        # bot mode: —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ bot token
        await client.start(bot_token=BOT_TOKEN)
    log_console("Telethon –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω.")
    # notify owner
    await notify_owner_on_start()
    # –∑–∞–¥–∞—á–∏
    asyncio.create_task(schedule_poster())
    # run until disconnected
    await client.run_until_disconnected()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        log_console("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞ (KeyboardInterrupt).")
    except Exception as ex:
        log_console(f"Fatal error: {ex}")
